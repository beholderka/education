const {
  addValue,
  eventClickButton,
  getBaseLog,
  actionMemory,
  actionActionValue,
  actionTwoOperandsEqual,
  actionOneOperandsEqual,
  calculate,
} = require('../index');

describe('addValue', () => {
  test('addValue 0', () => {
    const state = {
      value: '0',
      valueAll: '',
      operandA: 0,
      operandB: 0,
      prevSign: '+',
      nd: false,
      isOperand: true,
      memory: 0,
      sign: '',
      actionTwoOperands: ['+', '-', '/', '*', 'xy', 'yx', 'x√y', 'EE', 'logy'],
      actionOneOperands: [
        'x2',
        'x3',
        '1/x',
        'ex',
        'sin',
        'cos',
        'tan',
        'asin',
        'acos',
        'atan',
        'sinh',
        'cosh',
        'tanh',
        'asinh',
        'acosh',
        'atanh',
        '√',
        '3√x',
        '10x',
        'log',
        'log2',
        'ln',
        'x!',
        '%',
      ],
      actionValue: ['Rand', '+/-', 'e', 'П'],
      memoryValue: ['mc', 'mr', 'm+', 'm-'],
    };
    expect(addValue(state, '0')).toBeUndefined();
  });
  test('addValue 1', () => {
    const state = {
      value: '1',
      valueAll: '',
      operandA: 0,
      operandB: 0,
      prevSign: '+',
      nd: false,
      isOperand: true,
      memory: 0,
      sign: '',
      actionTwoOperands: ['+', '-', '/', '*', 'xy', 'yx', 'x√y', 'EE', 'logy'],
      actionOneOperands: [
        'x2',
        'x3',
        '1/x',
        'ex',
        'sin',
        'cos',
        'tan',
        'asin',
        'acos',
        'atan',
        'sinh',
        'cosh',
        'tanh',
        'asinh',
        'acosh',
        'atanh',
        '√',
        '3√x',
        '10x',
        'log',
        'log2',
        'ln',
        'x!',
        '%',
      ],
      actionValue: ['Rand', '+/-', 'e', 'П'],
      memoryValue: ['mc', 'mr', 'm+', 'm-'],
    };
    expect(addValue(state, '1')).toBeUndefined();
  });
  test('addValue .', () => {
    const state = {
      value: '1',
      valueAll: '',
      operandA: 0,
      operandB: 0,
      prevSign: '+',
      nd: false,
      isOperand: true,
      memory: 0,
      sign: '',
      actionTwoOperands: ['+', '-', '/', '*', 'xy', 'yx', 'x√y', 'EE', 'logy'],
      actionOneOperands: [
        'x2',
        'x3',
        '1/x',
        'ex',
        'sin',
        'cos',
        'tan',
        'asin',
        'acos',
        'atan',
        'sinh',
        'cosh',
        'tanh',
        'asinh',
        'acosh',
        'atanh',
        '√',
        '3√x',
        '10x',
        'log',
        'log2',
        'ln',
        'x!',
        '%',
      ],
      actionValue: ['Rand', '+/-', 'e', 'П'],
      memoryValue: ['mc', 'mr', 'm+', 'm-'],
    };
    expect(addValue(state, '.')).toBeUndefined();
  });
  test('addValue AC', () => {
    const state = {
      value: '0',
      valueAll: '',
      operandA: 0,
      operandB: 0,
      prevSign: '+',
      nd: false,
      isOperand: true,
      memory: 0,
      sign: '',
      actionTwoOperands: ['+', '-', '/', '*', 'xy', 'yx', 'x√y', 'EE', 'logy'],
      actionOneOperands: [
        'x2',
        'x3',
        '1/x',
        'ex',
        'sin',
        'cos',
        'tan',
        'asin',
        'acos',
        'atan',
        'sinh',
        'cosh',
        'tanh',
        'asinh',
        'acosh',
        'atanh',
        '√',
        '3√x',
        '10x',
        'log',
        'log2',
        'ln',
        'x!',
        '%',
      ],
      actionValue: ['Rand', '+/-', 'e', 'П'],
      memoryValue: ['mc', 'mr', 'm+', 'm-'],
    };
    expect(addValue(state, 'AC')).toBeUndefined();
  });
  test('addValue (', () => {
    const state = {
      value: '0',
      valueAll: '',
      operandA: 0,
      operandB: 0,
      prevSign: '+',
      nd: false,
      isOperand: true,
      memory: 0,
      sign: '',
      actionTwoOperands: ['+', '-', '/', '*', 'xy', 'yx', 'x√y', 'EE', 'logy'],
      actionOneOperands: [
        'x2',
        'x3',
        '1/x',
        'ex',
        'sin',
        'cos',
        'tan',
        'asin',
        'acos',
        'atan',
        'sinh',
        'cosh',
        'tanh',
        'asinh',
        'acosh',
        'atanh',
        '√',
        '3√x',
        '10x',
        'log',
        'log2',
        'ln',
        'x!',
        '%',
      ],
      actionValue: ['Rand', '+/-', 'e', 'П'],
      memoryValue: ['mc', 'mr', 'm+', 'm-'],
    };
    expect(addValue(state, '(')).toBeUndefined();
  });
  test('addValue 1+(', () => {
    const state = {
      value: '0',
      valueAll: '',
      operandA: 1,
      operandB: 0,
      prevSign: '+',
      nd: false,
      isOperand: true,
      memory: 0,
      sign: '+',
      actionTwoOperands: ['+', '-', '/', '*', 'xy', 'yx', 'x√y', 'EE', 'logy'],
      actionOneOperands: [
        'x2',
        'x3',
        '1/x',
        'ex',
        'sin',
        'cos',
        'tan',
        'asin',
        'acos',
        'atan',
        'sinh',
        'cosh',
        'tanh',
        'asinh',
        'acosh',
        'atanh',
        '√',
        '3√x',
        '10x',
        'log',
        'log2',
        'ln',
        'x!',
        '%',
      ],
      actionValue: ['Rand', '+/-', 'e', 'П'],
      memoryValue: ['mc', 'mr', 'm+', 'm-'],
    };
    expect(addValue(state, '(')).toBeUndefined();
  });
  test('addValue 1(', () => {
    const state = {
      value: '0',
      valueAll: '',
      operandA: 1,
      operandB: 0,
      prevSign: '',
      nd: false,
      isOperand: true,
      memory: 0,
      sign: '+',
      actionTwoOperands: ['+', '-', '/', '*', 'xy', 'yx', 'x√y', 'EE', 'logy'],
      actionOneOperands: [
        'x2',
        'x3',
        '1/x',
        'ex',
        'sin',
        'cos',
        'tan',
        'asin',
        'acos',
        'atan',
        'sinh',
        'cosh',
        'tanh',
        'asinh',
        'acosh',
        'atanh',
        '√',
        '3√x',
        '10x',
        'log',
        'log2',
        'ln',
        'x!',
        '%',
      ],
      actionValue: ['Rand', '+/-', 'e', 'П'],
      memoryValue: ['mc', 'mr', 'm+', 'm-'],
    };
    expect(addValue(state, '(')).toBeUndefined();
  });

  test('addValue 1*(', () => {
    const state = {
      value: '0',
      valueAll: '',
      operandA: 1,
      operandB: 0,
      prevSign: '',
      nd: false,
      isOperand: true,
      memory: 0,
      sign: '',
      actionTwoOperands: ['+', '-', '/', '*', 'xy', 'yx', 'x√y', 'EE', 'logy'],
      actionOneOperands: [
        'x2',
        'x3',
        '1/x',
        'ex',
        'sin',
        'cos',
        'tan',
        'asin',
        'acos',
        'atan',
        'sinh',
        'cosh',
        'tanh',
        'asinh',
        'acosh',
        'atanh',
        '√',
        '3√x',
        '10x',
        'log',
        'log2',
        'ln',
        'x!',
        '%',
      ],
      actionValue: ['Rand', '+/-', 'e', 'П'],
      memoryValue: ['mc', 'mr', 'm+', 'm-'],
    };
    expect(addValue(state, '(')).toBeUndefined();
  });

  test('addValue (5+1)', () => {
    const state = {
      value: '1',
      valueAll: '+',
      operandA: '(5',
      operandB: 0,
      prevSign: '',
      nd: false,
      isOperand: true,
      memory: 0,
      sign: '+',
      actionTwoOperands: ['+', '-', '/', '*', 'xy', 'yx', 'x√y', 'EE', 'logy'],
      actionOneOperands: [
        'x2',
        'x3',
        '1/x',
        'ex',
        'sin',
        'cos',
        'tan',
        'asin',
        'acos',
        'atan',
        'sinh',
        'cosh',
        'tanh',
        'asinh',
        'acosh',
        'atanh',
        '√',
        '3√x',
        '10x',
        'log',
        'log2',
        'ln',
        'x!',
        '%',
      ],
      actionValue: ['Rand', '+/-', 'e', 'П'],
      memoryValue: ['mc', 'mr', 'm+', 'm-'],
    };
    expect(addValue(state, ')')).toBeUndefined();
  });


  test.each([
    ['x2'],
    ['x3'],
    ['1/x'],
    ['ex'],
    ['sin'],
    ['cos'],
    ['tan'],
    ['asin'],
    ['acos'],
    ['atan'],
    ['sinh'],
    ['cosh'],
    ['tanh'],
    ['asinh'],
    ['acosh'],
    ['atanh'],
    ['√'],
    ['3√x'],
    ['10x'],
    ['log'],
    ['log2'],
    ['ln'],
    ['x!'],
    ['%'],
    ['Rand'], ['+/-'], ['e'], ['П'],
    ['+'], ['-'], ['/'], ['*'], ['xy'], ['yx'], ['x√y'], ['EE'], ['logy'],
    ['mc'], ['mr'], ['m+'], ['m-'], ['='],
  ])('testing arguments %s', (arg1) => {
    const state = {
      value: '',
      valueAll: '',
      operandA: 1,
      operandB: 3,
      prevSign: '+',
      nd: false,
      isOperand: true,
      memory: 0,
      sign: '',
      actionTwoOperands: ['+', '-', '/', '*', 'xy', 'yx', 'x√y', 'EE', 'logy'],
      actionOneOperands: [
        'x2',
        'x3',
        '1/x',
        'ex',
        'sin',
        'cos',
        'tan',
        'asin',
        'acos',
        'atan',
        'sinh',
        'cosh',
        'tanh',
        'asinh',
        'acosh',
        'atanh',
        '√',
        '3√x',
        '10x',
        'log',
        'log2',
        'ln',
        'x!',
        '%',
      ],
      actionValue: ['Rand', '+/-', 'e', 'П'],
      memoryValue: ['mc', 'mr', 'm+', 'm-'],
    };
    expect(addValue(state, arg1)).toBeUndefined();
  });
});


describe('actionTwoOperandsEqual', () => {
  test.each([
    ['+', 4], ['-', 2], ['/', 3], ['*', 3], ['xy', 3], ['yx', 1], ['x√y', 1], ['EE', 30], ['logy', Infinity], ['', ''],
  ])('testing actionTwoOperandsEqual arguments %s', (arg1, arg2) => {
    const state = {
      value: '',
      valueAll: '',
      operandA: 3,
      operandB: 1,
      prevSign: '',
      nd: false,
      isOperand: true,
      memory: 0,
      sign: arg1,
      actionTwoOperands: ['+', '-', '/', '*', 'xy', 'yx', 'x√y', 'EE', 'logy'],
      actionOneOperands: [
        'x2',
        'x3',
        '1/x',
        'ex',
        'sin',
        'cos',
        'tan',
        'asin',
        'acos',
        'atan',
        'sinh',
        'cosh',
        'tanh',
        'asinh',
        'acosh',
        'atanh',
        '√',
        '3√x',
        '10x',
        'log',
        'log2',
        'ln',
        'x!',
        '%',
      ],
      actionValue: ['Rand', '+/-', 'e', 'П'],
      memoryValue: ['mc', 'mr', 'm+', 'm-'],
    };
    expect(actionTwoOperandsEqual(state)).toEqual(arg2);
  });
});

describe('calculate', () => {
  test('calculate', () => {
    expect(calculate()).toBeUndefined();
  });
});
describe('eventClickButton', () => {
  test('eventClickButton 2nd', () => {
    expect(eventClickButton({
      target: {
        activeElement: {
          value: '2nd', classList: {
            contains: () => true,
          },
        },
      },
    })).toBeUndefined();
  })
  test('eventClickButton a2nd', () => {
    expect(eventClickButton({
      target: {
        activeElement: {
          value: 'a2nd', classList: {
            contains: () => true,
          },
        },
      },
    })).toBeUndefined();
  });
  test('eventClickButton true', () => {
    expect(eventClickButton({
      target: {
        activeElement: {
          value: 'a2nd', classList: {
            contains: () => false,
          },
        },
      },
    })).toBeUndefined();
  });
});